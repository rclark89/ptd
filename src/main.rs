// crates for constructing & sending email
use lettre_email::EmailBuilder;
use lettre::smtp::authentication::Credentials;
use lettre::{SmtpClient, Transport};

// future: put these into a (pub) mod, rather than direct from lib.rs
use ptd::randomcode;
use ptd::datetime;
use ptd::posname;
use ptd::engname;
use ptd::gas;
use ptd::elec;
use ptd::water;
use ptd::yesno;
use ptd::new_logfile;
use ptd::append_to_log;
//use ptd::emaileng;
//use ptd::emailsup;


// save results to logfile.txt - append new line with each line of input.
// future: save to DB or blockchain (append only)???

fn main() {
// Checks for creation of logfile. Not related to email at this point.
	let clog = new_logfile();

/* // Requests email addresses
	let email_eng = emaileng();
	let email_supervisor = emailsup();
	
	// Convert to string
	let mut email1 = format!("{}",email_eng);
	let mut email2 = format!("{}",email_supervisor);


	
	
	print!("{}",email1);
	print!("{}",email2); */

	
// Instantiates objects to be used in email.
	let position = posname();
	let engineer = engname();
	let safe = yesno();
	let g = gas();
	let l = elec();
	let w = water();
	let code = randomcode();
	let dt = datetime();
	// Add object for creation of logfile.txt
	
// Create email permit to be sent.
	println!("This permit will be emailed to the specified users.");
	
	let emailtext = format!(
	"\nThis email is from an automated inbox. Do not reply. 
	\nPermit to dig number: {} {} \n
	\nPosition name: {} \n
	\nEngineer name: {} \n
	\nIt is {} \n
	\nThe following services have been located: \n
	\n{}\n
	\n{}\n
	\n{}\n", 
	&code, &dt, &position, &engineer, &safe, &g, &l, &w //adds details from input functions to email text string.
	);

// Send email.	


let email = EmailBuilder::new() //creates new email item
		//.to(&*email1)
		//.to(&*email2)
		.to("rossclark89@gmail.com")
		.to("responsibleischief@gmail.com")
        .from("permittodig@zohomail.eu")
        .subject("Permit to dig")
        .text(emailtext)
		//.text("This permit applies to {}.",loc)
		//.text("This permit was generated by {}.",person)
		//.text("Is it safe to dig? {}.",safe)
        .build()
        .unwrap();
		
let mut mailer = SmtpClient::new_simple("smtp.zoho.eu") //sends email via Smtp - the simplest way of doing this!
        .unwrap()
		// DANGER ZONE
        .credentials(Credentials::new("permittodig@zohomail.eu".into(), "PTDPW2023".into())) //Make sure not to expose your credentials.
		// DANGER ZONE
        .transport();

let result = mailer.send(email.into());

println!("{:?}", result);

// Append to log
let aplog = append_to_log(engineer,dt,code);

}


